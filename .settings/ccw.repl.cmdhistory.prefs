cmdhistory=["(use 'opennlp.nlp)" "(clojure.pprint (get-sentences \\"Test sentence. Another sentence. Exciting sentence\! More text.\\"))" "(pprint (get-sentences \\"Test sentence. Another sentence. Exciting sentence\! More text.\\"))" "(use 'clojure.pprint)" "(pprint (get-sentences \\"Test sentence. Another sentence. Exciting sentence\! More text.\\"))" "(pprint (tokenize\\n          \\"Test sentence. Another sentence. Exciting sentence\! More text.\\"))" "(pprint (detokenize\\n          \\"Test sentence. Another sentence. Exciting sentence\! More text.\\"))" "(pprint (detokenize (tokenize\\n          \\"Test sentence. Another sentence. Exciting sentence\! More text.\\")))" "(pprint (pos-tag (tokenize\\n                 \\"Test sentence. Another sentence. Exciting sentence\! More text.\\")))" "(pprint (pos-tag (tokenize\\n                 \\"Test sentence. Another sentence. Exciting sentence\! More text. Wilfred brimly said primly to his mistress Miss Willoby.\\")))" "(pprint (pos-tag (tokenize\\n                 \\"Test sentence. Another sentence. Exciting sentence\! More text. Wilfred Brimly said primly to his mistress Miss Willoby.\\")))" "(pprint (name-find (tokenize\\n                   \\"Test sentence. Another sentence. Exciting sentence\! More text. Wilfred Brimly said primly to his mistress Miss Willoby.\\")))" "(name-find (tokenize\\n           \\"Test sentence. Another sentence. Exciting sentence\! More text. Wilfred Brimly said primly to his mistress Miss Willoby.\\"))" "(use 'opennlp.treebank)" "(def chunker (make-treebank-chunker \\"models/en-chunker.bin\\"))" "(pprint (chunker (pos-tag (tokenize \\"Test data is exciting. Test data is fun. Leaves of grass and trees of glass.\\"))))" "(input-source-text \\"text/cleaned/pnp-excerpt.txt\\")" "(input-source-text \\"text//cleaned//pnp-excerpt.txt\\")" "(input-source-text \\"text\\\\cleaned\\\\pnp-excerpt.txt\\")" "(input-source-text \\"text\\\\\\\\cleaned\\\\\\\\pnp-excerpt.txt\\")" "(slurp \\"text/cleaned/pnp_excerpt.txt\\")" "(slurp \\"../text/cleaned/pnp_excerpt.txt\\")" "(slurp \\"../../text/cleaned/pnp_excerpt.txt\\")" "(slurp \\"pnp_excerpt.txt\\")" "(slurp \\"texts/pnp_excerpt.txt\\")" "(slurp \\"texts\\\\\\\\pnp_excerpt.txt\\")" "(slurp \\"texts\\\\\\\\cleaned\\\\\\\\pnp_excerpt.txt\\")" "(input-source-text\\n  \\"texts\\\\\\\\cleaned\\\\\\\\pnp_excerpt.txt\\")" "(map \#( _1 _1) [1 2 3 4])" "(map \#( % %) [1 2 3 4])" "(map \#( % %) '(1 2 3 4))" "(map \#(%) '(1 2 3 4))" "(map \#(+ %) '(1 2 3 4))" "(map \#('%) '(1 2 3 4))" "(map \#(%1 %2) '(1 2 3 4))" "(map \#(%1 %2) '('(1 2) '(3 4)))" "(map \#(%1 %2) '((1 2) (3 4)))" "(map \#(%1 %2) '(1 2) '(3 4))" "(map \#(%1) '(1 2) '(3 4))" "(map \#(%1) '(1 2 3 4))" "(map \#(VAR %1) '(1 2 3 4))" "(map \#(var %1) '(1 2 3 4))" "(map \#(pprint %1) '(1 2 3 4))" "(map \#(pprint %1 %2) '(1 2 3 4))" "(map \#(pprint %) '(1 2 3 4))" "(map \#({\:x % \:y %}) [1 2 3 4])" "(map \#({\:x %1 \:y %}1) [1 2 3 4])" "(map \#({\:x %1 \:y %}1) '(1 2 3 4))" "(map \#({\:x %1 \:y %1}) '(1 2 3 4))" "(map \#({\:x % \:y %}) '(1 2 3 4))" "(map \#(hash-map \:x % \:y %) '(1 2 3 4))" "(map \#(hash-map \:x % \:y (+ 8 %)) '(1 2 3 4))" "(concat [1 2 3] [4 5 6])" "(concat [\\"1\\" \\"2\\" \\"3\\"] [\\"4\\" \\"5\\" \\"6\\"])" "(concat (map \#(\:x %) [{\:x 1} {\:x 5}]))" "(concat (map \#(\:x %) [{\:x 1} {\:x [5 6]}]))" "(concat (map \#(\:x %) [{\:x [1 2]} {\:x [5 6]}]))" "(map \#(\:x %) [{\:x [1 2]} {\:x [5 6]}])" "(mapcat \#(\:x %) [{\:x [1 2]} {\:x [5 6]}])" "(mapv \#(\:x %) [{\:x [1 2]} {\:x [5 6]}])" "(mapcat\\n  \#(\:x %) [{\:x [1 2]} {\:x [5 6]}])" "*print-right-margin*" "(+ 8 8)" "(+ 9 9)" "(categorize-into-paragraphs \\"Four score and seven years ago our forefathers brought forth a great nation. This text is here as a test.\\\\r\\\\nThis is only a test. If this was real text, it would say seomthing.\\")" "(concat \\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\")" "\\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\"" "\#(\\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\")" "(fn \\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\")" "(fn [] \\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\")" "(pcalls (fn [] \\"String test is \\" \#(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"]) \\". \\"))" "(pprint \\"String\\")" "(pprint \#(\\"String\\"))" "(pprint (\\"String\\"))" "(pprint '(\\"String\\"))" "(rand-nth [\\"grand\\" \\"fun\\" \\"working\\"])" "(+ 1 1)" "(pprint \\r\\n  (noun-phrases \\r\\n    (chunker \\r\\n      (pos-tag \\r\\n        (tokenize \\"And when the party entered the assembly room, it consisted of only five\\r\\naltogether.\\")))))" "(re-find nil)" "(re-find \#\\"^NP$\\" nil)" "(re-find \#\\"^NP$\\" (remove nil? nil))" "(re-find \#\\"^NP$\\" nil)" "(remove nil? nil)" "(remove \#(\:tag nil?) ({\:tag nil} {\:tag yes}))" "(remove \#(\:tag nil?) ({\:tag nil} {\:tag 1}))" "(remove \#(\:tag nil?) ({\:tag nil} {\:tag \\"1\\"}))" "(remove nil? ({\:tag nil} {\:tag \\"1\\"}))" "(remove \#(nil? (\:tag %))  ({\:tag nil} {\:tag \\"1\\"}))" "(doseq (remove \#(nil? (\:tag %))  ({\:tag nil} {\:tag \\"1\\"})))" "(doall (remove \#(nil? (\:tag %))  ({\:tag nil} {\:tag \\"1\\"})))" "(doall (remove \#(\= (\:tag %) nil\\n                   )  ({\:tag nil} {\:tag \\"1\\"})))" "(doall (map \#(\= (\:tag %) nil)  ({\:tag nil} {\:tag \\"1\\"})))" "(map \#(\= (\:tag %) nil)  ({\:tag nil} {\:tag \\"1\\"}))" "(map \#(\= (\:tag %) nil)  [{\:tag nil} {\:tag \\"1\\"}])" "(map \#(nil? (\:tag %))  [{\:tag nil} {\:tag \\"1\\"}])" "(remove \#(nil? (\:tag %))  [{\:tag nil} {\:tag \\"1\\"}])" "(+ 1 1)" "(concat \\"Example\\" \\"text\\")" "(apply str \\"Example\\" \\"text.\\")" "(apply str \\"Example\\" \\" \\" \\"text.\\")" "(detokenize \\"Example\\" \\"text\\" \\".\\")" "(nanogenmo.core/tokenize \\"An example sentence about [ACTOR-NAME]\\")" "(nanogenmo.core/chunker (nanogenmo.core/pos-tag (nanogenmo.core/tokenize sentence)))" "(nanogenmo.core/chunker (nanogenmo.core/pos-tag (nanogenmo.core/tokenize \\"An example sentence.\\")))" "(nanogenmo.core/chunker (nanogenmo.core/pos-tag (nanogenmo.core/tokenize \\"He walked past an example sentence.\\")))" "(nanogenmo.core/fixed-noun-phrases (nanogenmo.core/chunker (nanogenmo.core/pos-tag (nanogenmo.core/tokenize \\"He walked past an example sentence.\\"))))" "(for [x (range 1 30)] x)" "(re-find \#\\"X\\" \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")" "(re-find \#\\"X\\" \\"ABCDEFGHIJKLMNOPQRSTUVWYZ\\")"]
eclipse.preferences.version=1
